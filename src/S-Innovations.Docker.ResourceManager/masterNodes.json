{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourceLocation": { },
    "vmSize": { },
    "nodeCount": { },
    "sshPublicKey": { },
    "adminUsername": {},

  },
  "variables": {
    "mastersLbName": "",
    "publicIPAddressName": "",
    "mastersLbIPConfigName": "",
    "mastersLbBackendPoolName": "",
    "masterLBNatPoolName": "",
    "mastersNameInfix": "",
    "mastersLbIPConfigID": "",
    "resourceLocation": "",
    "virtualNetworkName": "",
    "uniqueStringArray": "",
    "vhdContainerName": "",
    "osDiskName": "",
    "osImageOffer": "",
    "osImagePublisher": "",
    "osImageSKU": "",
    "nicName": "",
    "sshKeyPath": "",
    "subnetName": "",
    "wadcfgxstart": "",
    "wadmetricsresourceid": "",
    "diagnosticsStorageAccountName": "",
    "apiVersion": "",
    "accountid": "",
    "wadcfgxend": "",
    "masterAutoscaleName": "",

  },
  "resources": [
    {
      "apiVersion": "2015-06-15",
      "name": "[variables('mastersLbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('mastersLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('mastersLbBackendPoolName')]"
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('masterLBNatPoolName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('mastersLbIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": 50000,
              "frontendPortRangeEnd": 50099,
              "backendPort": 22
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('mastersNameInfix')]",
      "location": "[parameters('resourceLocation')]",
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "VMScaleSet"
      },
      "dependsOn": [
        "storageLoop",
        "[concat('Microsoft.Network/loadBalancers/', variables('mastersLbName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "sku": {
        "name": "[parameters('vmSize')]",
        "tier": "Standard",
        "capacity": "[parameters('nodeCount')]"
      },
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "vhdContainers": [
                "[concat('https://', variables('uniqueStringArray')[0], '.blob.core.windows.net/', variables('vhdContainerName'))]",
                "[concat('https://', variables('uniqueStringArray')[1], '.blob.core.windows.net/', variables('vhdContainerName'))]",
                "[concat('https://', variables('uniqueStringArray')[2], '.blob.core.windows.net/', variables('vhdContainerName'))]",
                "[concat('https://', variables('uniqueStringArray')[3], '.blob.core.windows.net/', variables('vhdContainerName'))]",
                "[concat('https://', variables('uniqueStringArray')[4], '.blob.core.windows.net/', variables('vhdContainerName'))]"
              ],
              "name": "[variables('osDiskName')]",
              "caching": "ReadOnly",
              "createOption": "FromImage"
            },
            "imageReference": {
              "publisher": "[variables('osImagePublisher')]",
              "offer": "[variables('osImageOffer')]",
              "sku": "[variables('osImageSKU')]",
              "version": "latest"
            }
          },
          "osProfile": {
            "computerNamePrefix": "[variables('mastersNameInfix')]",
            "adminUsername": "[parameters('adminUsername')]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[variables('sshKeyPath')]",
                    "keyData": "[parameters('sshPublicKey')]"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicName')]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[variables('mastersLbIPConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetName'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('mastersLbName'), '/backendAddressPools/', variables('mastersLbBackendPoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('mastersLbName'), '/inboundNatPools/', variables('masterLBNatPoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "DockerExtension",
                "properties": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "DockerExtension",
                  "typeHandlerVersion": "1.0",
                  "settings": {
                  
                  }
                }

              }
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.Insights/autoscaleSettings",
      "apiVersion": "2015-04-01",
      "name": "[variables('masterAutoscaleName')]",
      "location": "[parameters('resourceLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('mastersNameInfix'))]"
      ],
      "properties": {
        "name": "[variables('masterAutoscaleName')]",
        "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('mastersNameInfix'))]",
        "enabled": true,
        "profiles": [
          {
            "name": "Profile1",
            "capacity": {
              "minimum": "1",
              "maximum": "10",
              "default": "[parameters('nodeCount')]"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "\\Processor\\PercentProcessorTime",
                  "metricNamespace": "",
                  "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('mastersNameInfix'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 50.0
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT1M"
                }
              }
            ]
          }
        ]
      }
    }    
  ]

}